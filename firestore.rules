rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Helpers for key shape validation
    function onlyAllowedKeys(allowed) {
      return request.resource.data.keys().hasOnly(allowed);
    }

    function hasAllKeys(required) {
      return request.resource.data.keys().hasAll(required);
    }

    // DEV: players are open until Auth is added.
    match /players/{playerId} {
      allow read, write: if true;
    }

    match /tables/{tableId} {
      // Players (anyone) can read active tables for Lobby/Table
      allow read: if resource.data.active == true;

      // Dev-safe create: any authenticated user (anon OK) may create a table but only with whitelisted keys
      allow create: if request.auth != null
        && hasAllKeys(['active','createdAt','maxSeats','activeSeatCount','gameType','blinds','buyIn'])
        && onlyAllowedKeys(['name','active','createdAt','maxSeats','activeSeatCount','gameType','blinds','buyIn','deletedAt'])
        && request.resource.data.active is bool
        && request.resource.data.maxSeats is int
        && request.resource.data.activeSeatCount is int
        && request.resource.data.blinds is map
        && request.resource.data.buyIn is map;

      // Update: players may ONLY change activeSeatCount; admins may archive (active/deletedAt)
      allow update: if (request.auth != null
                        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['activeSeatCount']))
                    || (isAdmin() && request.resource.data.diff(resource.data).changedKeys().hasOnly(['active','deletedAt']));

      // Delete: keep admin-only
      allow delete: if isAdmin();

      match /seats/{seatId} {
        allow read: if true;
        // Claim/leave: only limited fields may change; anon auth permitted
        allow create: if request.auth != null
          && request.resource.data.keys().hasAll(['seatIndex'])
          && request.resource.data.keys().hasOnly(['seatIndex','occupiedBy','displayName','sittingOut','stackCents','updatedAt']);
        allow update: if request.auth != null
          && request.resource.data.diff(resource.data).changedKeys()
               .hasOnly(['occupiedBy','displayName','sittingOut','stackCents','updatedAt'])
          && request.resource.data.seatIndex == resource.data.seatIndex; // seat index immutable
        allow delete: if false;
      }
    }

    // Hand state for a table (single doc: tables/{tableId}/hand/state)
    match /tables/{tableId}/hand/{docId} {
      // Anyone may read current hand markers
      allow read: if true;

      // Authenticated clients may create/update with a strict key whitelist
      allow create, update: if request.auth != null
        && request.resource.data.keys().subsetOf([
          'handNo',
          'dealerSeat',
          'sbSeat',
          'bbSeat',
          'toActSeat',
          'street',
          'betToMatchCents',
          'commits',
          'lastAggressorSeat',
          'updatedAt'
        ]);

      // No deletes from clients
      allow delete: if false;
    }

    // Hands are server-managed only.
    match /tables/{tableId}/hands/{handId} {
      allow read: if true;
      allow write: if false;
    }

    match /tables/{tableId}/hands/{handId}/intents/{intentId} {
      allow read: if true;
      allow create: if request.resource.data.keys().hasOnly(
            ['playerId', 'type', 'amountCents', 'createdAt']) &&
          request.resource.data.playerId is string &&
          request.resource.data.type in ['fold', 'check', 'call', 'raise'] &&
          (request.resource.data.amountCents == null ||
            request.resource.data.amountCents is number);
      allow update, delete: if false;
    }
  }
}
