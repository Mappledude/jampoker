rules_version = '2';
service cloud.firestore {
  // Returns a nested map or a default when missing or not a map.
  function mapOr(m, k, d) {
    return (k in m && m[k] is map) ? m[k] : d;
  }

  // Returns a value from a map or a default when the key is missing.
  function getOr(m, k, d) {
    return (k in m) ? m[k] : d;
  }

  // Checks for a two-level deep key like m[k1][k2].
  function has2(m, k1, k2) {
    return (k1 in m) && (m[k1] is map) && (k2 in m[k1]);
  }

  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    function tableDoc(tableId) {
      return get(/databases/$(database)/documents/tables/$(tableId));
    }
    function isTableAdmin(tableId) {
      return request.auth != null &&
             tableDoc(tableId).data.createdByUid != null &&
             tableDoc(tableId).data.createdByUid == request.auth.uid;
    }

    // Helpers for key shape validation
    function onlyAllowedKeys(allowed) {
      return request.resource.data.keys().hasOnly(allowed);
    }

    function hasAllKeys(required) {
      return request.resource.data.keys().hasAll(required);
    }

    // DEV: players are open until Auth is added.
    match /players/{playerId} {
      allow read, write: if true;
    }

    match /tables/{tableId} {
      // Players (anyone) can read active tables for Lobby/Table
      allow read: if resource.data.active == true;

      // Dev-safe create: any authenticated user (anon OK) may create a table but only with whitelisted keys
      allow create: if request.auth != null
        && hasAllKeys(['active','createdAt','maxSeats','activeSeatCount','gameType','blinds','buyIn'])
        && onlyAllowedKeys(['name','active','createdAt','maxSeats','activeSeatCount','gameType','blinds','buyIn','deletedAt','createdByUid'])
        && request.resource.data.active is bool
        && request.resource.data.maxSeats is int
        && request.resource.data.activeSeatCount is int
        && request.resource.data.blinds is map
        && request.resource.data.buyIn is map;

      // Update: players may ONLY change activeSeatCount; admins may archive (active/deletedAt)
      allow update: if (request.auth != null
                        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['activeSeatCount']))
                    || (isAdmin() && request.resource.data.diff(resource.data).changedKeys().hasOnly(['active','deletedAt']))
                    || (request.auth != null
                        && resource.data.createdByUid == null
                        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['createdByUid'])
                        && request.resource.data.createdByUid == request.auth.uid);

      // Delete: keep admin-only
      allow delete: if isAdmin();

      match /seats/{seatId} {
        allow read: if true;
        // Claim/leave: only limited fields may change; anon auth permitted
        allow create: if request.auth != null
          && request.resource.data.keys().hasAll(['seatIndex'])
          && request.resource.data.keys().hasOnly(['seatIndex','occupiedBy','displayName','sittingOut','stackCents','updatedAt']);
        allow update: if request.auth != null
          && request.resource.data.diff(resource.data).changedKeys()
               .hasOnly(['occupiedBy','displayName','sittingOut','stackCents','updatedAt'])
          && request.resource.data.seatIndex == resource.data.seatIndex; // seat index immutable
        allow delete: if false;
      }

      // Canonical hand state path:
      match /handState/{docId} {
        allow read: if true;

        function streetToNum(s) {
          return s == 'preflop' ? 0
               : s == 'flop' ? 1
               : s == 'turn' ? 2
               : 3;
        }

        function actorIs(tableId, seat) {
          return request.auth != null &&
                 get(/databases/$(database)/documents/tables/$(tableId)/seats/$(seat))
                   .data.occupiedBy == request.auth.uid;
        }

        function isCheck(tableId) {
          let seat = resource.data.toActSeat;
          let bet = resource.data.betToMatchCents;
          let commits = mapOr(resource.data, 'commits', {});
          let oldCommit = getOr(commits, seat, 0);
          let reqCommits = mapOr(request.resource.data, 'commits', {});
          let newCommit = getOr(reqCommits, seat, oldCommit);
          let delta = newCommit - oldCommit;
          return actorIs(tableId, seat) && bet == oldCommit && delta == 0 &&
                 request.resource.data.diff(resource.data).changedKeys()
                   .hasOnly(['toActSeat','updatedAt','street','lastAggressorSeat','betToMatchCents']) &&
                 streetToNum(request.resource.data.street) >= streetToNum(resource.data.street) &&
                 request.resource.data.toActSeat != resource.data.toActSeat;
        }

        function isCall(tableId) {
          let seat = resource.data.toActSeat;
          let bet = resource.data.betToMatchCents;
          let commits = mapOr(resource.data, 'commits', {});
          let oldCommit = getOr(commits, seat, 0);
          let reqCommits = mapOr(request.resource.data, 'commits', {});
          let newCommit = getOr(reqCommits, seat, 0);
          let delta = newCommit - oldCommit;
          return actorIs(tableId, seat) && delta == bet - oldCommit && delta >= 0 &&
                 request.resource.data.diff(resource.data).changedKeys()
                   .hasOnly(['toActSeat','updatedAt','commits','street','lastAggressorSeat','betToMatchCents']) &&
                 streetToNum(request.resource.data.street) >= streetToNum(resource.data.street) &&
                 request.resource.data.toActSeat != resource.data.toActSeat;
        }

        allow update: if isCheck(tableId) || isCall(tableId);
        allow create, delete: if isTableAdmin(tableId);
      }
    }

    // Hands are server-managed only.
    match /tables/{tableId}/hands/{handId} {
      allow read: if true;
      allow write: if false;
    }

    match /tables/{tableId}/hands/{handId}/intents/{intentId} {
      allow read: if true;
      allow create: if request.resource.data.keys().hasOnly(
            ['playerId', 'type', 'amountCents', 'createdAt']) &&
          request.resource.data.playerId is string &&
          request.resource.data.type in ['fold', 'check', 'call', 'raise'] &&
          (request.resource.data.amountCents == null ||
            request.resource.data.amountCents is number);
      allow update, delete: if false;
    }
  }
}
