rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Table creator/admin check
    function isAdminOfTable(tableId) {
      return isSignedIn() &&
        get(/databases/$(database)/documents/tables/$(tableId)).data.creatorUid == request.auth.uid;
    }

    // Is the current user seated at this table? (seats indexed 0..8)
    function isSeated(tableId) {
      return
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/0) && get(/databases/$(database)/documents/tables/$(tableId)/seats/0).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/1) && get(/databases/$(database)/documents/tables/$(tableId)/seats/1).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/2) && get(/databases/$(database)/documents/tables/$(tableId)/seats/2).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/3) && get(/databases/$(database)/documents/tables/$(tableId)/seats/3).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/4) && get(/databases/$(database)/documents/tables/$(tableId)/seats/4).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/5) && get(/databases/$(database)/documents/tables/$(tableId)/seats/5).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/6) && get(/databases/$(database)/documents/tables/$(tableId)/seats/6).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/7) && get(/databases/$(database)/documents/tables/$(tableId)/seats/7).data.uid == request.auth.uid) ||
        (exists(/databases/$(database)/documents/tables/$(tableId)/seats/8) && get(/databases/$(database)/documents/tables/$(tableId)/seats/8).data.uid == request.auth.uid);
    }

    // Root: tables/*
    match /tables/{tableId} {
      // Everyone signed-in can read table shell
      allow read: if isSignedIn();
      // No client writes to the table doc itself
      allow write: if false;

      // tables/{tableId}/players/*
      match /players/{playerId} {
        allow read: if isSignedIn();

        // Admin may create players but cannot set assignedUid from the client
        allow create: if isAdminOfTable(tableId) && !('assignedUid' in request.resource.data);

        // Admin may update players, but NOT the assignedUid via client
        allow update: if isAdminOfTable(tableId) &&
          !request.resource.data.diff(resource.data).changedKeys().hasAny(['assignedUid']);

        // Admin may delete players
        allow delete: if isAdminOfTable(tableId);
      }

      // tables/{tableId}/seats/* â€” client NEVER writes; must use callable claimSeatTX (Functions/Admin SDK bypasses rules)
      match /seats/{seatId} {
        allow read: if isSignedIn();
        allow write: if false;
      }

      // tables/{tableId}/handState/*
      match /handState/{docId} {
        allow read: if isSignedIn();
        allow write: if false;
      }

      // tables/{tableId}/actions/*
      match /actions/{actionId} {
        allow read: if isSignedIn();

        // Players can enqueue their own actions only if they are seated
        allow create: if isSignedIn() &&
          isSeated(tableId) &&
          request.resource.data.actorUid == request.auth.uid;

        // No client updates/deletes of actions
        allow update, delete: if false;
      }
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
