rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // DEV: players are open until Auth is added.
    match /players/{playerId} {
      allow read, write: if true;
    }

    match /tables/{tableId} {
      // Players may read only active tables.
      allow get: if resource.data.active == true;
      allow list: if request.query.active == true;

      // Allow creating/deleting tables from Admin UI (dev phase).
      allow create, delete: if true;

      // Allow client to change nextVariantId, or admin to archive.
      allow update: if request.resource.data.diff(resource.data).changedKeys().hasOnly(['nextVariantId']) ||
        (request.resource.data.diff(resource.data).changedKeys().hasOnly(['active', 'deletedAt']) &&
         resource.data.active == true && request.resource.data.active == false);
    }

    match /tables/{tableId}/seats/{playerId} {
      allow read: if true;

      // Seats are created when a player joins and removed when they leave.
      // Chip stacks and seat numbers are managed by the server, so updates
      // are only allowed when the player is updating their own seat record.
      allow create, delete: if true;
      allow update: if
        request.auth != null &&
        request.auth.uid == request.resource.data.occupiedBy &&
        request.auth.uid == request.resource.data.playerId;
    }

    // Hands are server-managed only.
    match /tables/{tableId}/hands/{handId} {
      allow read: if true;
      allow write: if false;
    }

    match /tables/{tableId}/hands/{handId}/intents/{intentId} {
      allow read: if true;
      allow create: if request.resource.data.keys().hasOnly(
            ['playerId', 'type', 'amountCents', 'createdAt']) &&
          request.resource.data.playerId is string &&
          request.resource.data.type in ['fold', 'check', 'call', 'raise'] &&
          (request.resource.data.amountCents == null ||
            request.resource.data.amountCents is number);
      allow update, delete: if false;
    }
  }
}
